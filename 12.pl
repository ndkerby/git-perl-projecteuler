#!/usr/bin/perl
#
# Project Euler.net
# 
# PROBLEM 12:
#     The sequence of triangle numbers is generated by adding the natural 
#     numbers. So the 7th triangle number would be: 
#         1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
#     The first ten terms would be:
#         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#     We can see that 28 is the first triangle number to have over five 
#     divisors.
#
#     What is the value of the first triangle number to have over five 
#     hundred divisors?
#
# ANSWER: 
#    ## stopped at 9750
#
# @author
# Natalie Kerby :: ndkerby@gmail.com

my $found = 0;
my $n_triangle = 0;
my $sum_triangle = 0;
my $max = 500;
my $high = 0;
my @divisors;

while ((scalar @divisors) < $max){
    $n_triangle++; 
    $sum_triangle += $n_triangle;
    print "Triangle: " . $n_triangle . " Sum: " . $sum_triangle . "\n";
 
    my $total_divisors = number_divisors($sum_triangle);
    #if( $total_divisors > $max)
    #{
    #    print "Triangle: " . $n_triangle . " Sum: " . $sum_triangle . "\n";
    #    $found = 1;
    #}
    #if( $total_divisors > $high)
    #    {
    #        $high = $total_divisors;
    #    }
    #print "Triangle: " . $n_triangle . " Sum: " . $sum_triangle . " Count: " . scalar(@divisors) . " High: " . $high . "\n";
}

sub number_divisors{
    my ($triangle_sum ) = @_;
    my $count;
    my $square_root = sqrt($triangle_sum);
    @divisors = ();
    for( my $int = 1; $int <= $square_root; $int++){
        if ( $triangle_sum%$int == 0 ){
            my $mod = ($triangle_sum/$int);
            if ((!grep /^$int$/, @divisors)){ 
                push(@divisors, $int);
                push(@divisors, $mod) if ($int != $mod);
            }
        }
    }
    return @divisors; 
}